import { PrismaClient } from "@prisma/client";
import bcrypt from "bcrypt";

const courseSeed = [
  {
    id: 1,
    title: "Berpikir komputasional menggunakan Python",
    description:
      "Belajar dasar dari berpikir komputasional dengan memecahkan masalah-masalah menggunakan bahasa Python!",
    source: "KU1102 Pengenalan Komputasi",
    rank: 1,
  },
];

const unitSeed = [
  {
    id: 1,
    courseId: 1,
    description: "Memulai pemrograman dengan bahasa Python",
    rank: 1,
  },
];

const moduleSeed = [
  {
    id: 1,
    unitId: 1,
    title: "Instalasi Python & IDE serta program pertama Anda dalam Python",
    description:
      "Mulai belajar Python dari awal dengan menyiapkan lingkungannya!",
    rank: 1,
  },
];

const chunkSeed = [
  {
    id: 1,
    moduleId: 1,
    title: "Instalasi Python",
    content:
      "course-python-1/memulai-pemrograman/instalasi-program-pertama/instalasi-python.md",
    rank: 1,
  },
  {
    id: 2,
    moduleId: 1,
    title: "Instalasi IDE",
    content:
      "course-python-1/memulai-pemrograman/instalasi-program-pertama/instalasi-ide.md",
    rank: 2,
  },
  {
    id: 3,
    moduleId: 1,
    title: "Menjalankan Python di browser",
    content:
      "course-python-1/memulai-pemrograman/instalasi-program-pertama/python-browser.md",
    rank: 3,
  },
  {
    id: 4,
    moduleId: 1,
    title: "Program pertama dalam Python",
    content:
      "course-python-1/memulai-pemrograman/instalasi-program-pertama/program-pertama.md",
    rank: 4,
  },
];

const prisma = new PrismaClient();
async function main() {
  console.log(">> Seeding users...");
  const hashedPassword = await bcrypt.hash("helloworld", 12);
  await prisma.user.upsert({
    where: {
      id: 1,
    },
    update: {},
    create: {
      id: 1,
      name: "Test User",
      email: "test@test.com",
      password: hashedPassword,
    },
  });

  console.log(">> Seeding courses...");
  for (const course of courseSeed) {
    await prisma.course.upsert({
      where: {
        id: course.id,
      },
      update: {
        ...course,
      },
      create: {
        ...course,
      },
    });
  }

  console.log(">> Seeding units...");
  for (const unit of unitSeed) {
    await prisma.unit.upsert({
      where: {
        id: unit.id,
      },
      update: {
        ...unit,
      },
      create: {
        ...unit,
      },
    });
  }

  console.log(">> Seeding modules...");
  for (const myModule of moduleSeed) {
    await prisma.module.upsert({
      where: {
        id: myModule.id,
      },
      update: {
        ...myModule,
      },
      create: {
        ...myModule,
      },
    });
  }

  console.log(">> Seeding chunks...");
  for (const chunk of chunkSeed) {
    await prisma.chunk.upsert({
      where: {
        id: chunk.id,
      },
      update: {
        ...chunk,
      },
      create: {
        ...chunk,
      },
    });
  }
}

main()
  .then(async () => {
    await prisma.$disconnect();
  })
  .catch(async (e) => {
    console.error(e);
    await prisma.$disconnect();
    process.exit(1);
  });
